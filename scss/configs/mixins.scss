@use "variables-init" as vi;
@use "variables-scss" as vs;
@use "variables-derived" as vd;

@mixin block($spacing: vs.getVar("block-spacing")) {
  &:not(:last-child) {
    margin-bottom: $spacing;
  }
}

@mixin transition($transition...) {
  @if length($transition) == 0 {
    $transition: vd.$transition-base;
  }

  @if length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if nth($transition, 1) != null {
    transition: $transition;
  }

  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

@mixin scrollbar {
  #{if(&, "&", "*")} {
    scrollbar-color: vs.getVar("schollbar") transparent;
  }

  #{if(&, "&", "*")}::-webkit-scrollbar {
    width:  0.5rem;
    height: 0.5rem;
    @include transition(vd.$transition-time)
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-thumb {
    border-radius: 0.25rem;
    border:        0.125rem solid transparent;
    box-shadow:    inset 0 0 0 0.25rem vs.getVar("schollbar") ;
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-track {
    background: transparent;
  }

  #{if(&, "&", "*")}:hover::-webkit-scrollbar-thumb {
    box-shadow: inset 0 0 0 0.25rem vs.getVar("schollbar-hover") ;
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-corner {
    background: transparent;
  }
}

@mixin autodark-image {
  filter: brightness(0) invert(1);
}

@mixin clearfix {
  &::after {
    clear:   both;
    content: " ";
    display: table;
  }
}

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

@mixin reset {
  appearance:  none;
  background:  none;
  border:      none;
  color:       inherit;
  font-family: inherit;
  font-size:   1em;
  margin:      0;
  padding:     0;
}

@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection { @content; }
    &::selection { @content; }
  } @else {
    ::-moz-selection { @content; }
    ::selection { @content; }
  }
}

// Responsiveness

@mixin from($device) {
  @media screen and (min-width: $device) {
    @content;
  }
}

@mixin until($device) {
  @media screen and (max-width: ($device - 1px)) {
    @content;
  }
}

@mixin between($from, $until) {
  @media screen and (min-width: $from) and (max-width: ($until - 1px)) {
    @content;
  }
}

@mixin mobile {
  @media screen and (max-width: (vi.$tablet - 1px)) {
    @content;
  }
}

@mixin tablet {
  @media screen and (min-width: vi.$tablet), print {
    @content;
  }
}

@mixin tablet-only {
  @media screen and (min-width: vi.$tablet) and (max-width: vi.$desktop - 1px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: vi.$desktop) {
    @content;
  }
}

@mixin until-widescreen {
  @if vi.$widescreen-enabled {
    @media screen and (max-width: vi.$widescreen - 1px) {
      @content;
    }
  }
}

@mixin desktop-only {
  @if vi.$widescreen-enabled {
    @media screen and (min-width: vi.$desktop) and (max-width: vi.$widescreen - 1px) {
      @content;
    }
  }
}

@mixin widescreen {
  @if vi.$widescreen-enabled {
    @media screen and (min-width: vi.$widescreen) {
      @content;
    }
  }
}

@mixin widescreen-only {
  @if vi.$widescreen-enabled and vi.$fullhd-enabled {
    @media screen and (min-width: vi.$widescreen) and (max-width: vi.$fullhd - 1px) {
      @content;
    }
  }
}

@mixin until-fullhd {
  @if vi.$fullhd-enabled {
    @media screen and (max-width: vi.$fullhd - 1px) {
      @content;
    }
  }
}

@mixin fullhd {
  @if vi.$fullhd-enabled {
    @media screen and (min-width: vi.$fullhd) {
      @content;
    }
  }
}

@mixin touch {
  @media screen and (max-width: vi.$desktop - 1px) {
    @content;
  }
}

@mixin breakpoint($name) {
  $breakpoint: map-get(vi.$breakpoints, $name);

  @if $breakpoint {
    $from:  map-get($breakpoint, "from");
    $until: map-get($breakpoint, "until");

    @if $from and $until {
      @include between($from, $until) {
        @content;
      }
    } @else if $from {
      @include from($from) {
        @content;
      }
    } @else if $until {
      @include until($until) {
        @content;
      }
    }
  }
}

@mixin container-from($name, $width) {
  @container #{$name} (min-width: #{$width}) {
    @content;
  }
}

@mixin container-until($name, $width) {
  @container #{$name} (max-width: #{$width - 1px}) {
    @content;
  }
}