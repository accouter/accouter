@use "variables-init" as vi;
@use "variables-scss" as vs;
@use "variables-derived" as vd;

@mixin arrow($color: #{vs.getVar("arrow-color")}) {
  border:              0.125em solid $color;
  border-right:        0;
  border-top:          0;
  content:             " ";
  display:             block;
  height:              0.625em;
  margin-top:          -0.4375em;
  pointer-events:      none;
  position:            absolute;
  top:                 50%;
  transform:           rotate(-45deg);
  transform-origin:    center;
  transition-duration: vs.getVar("duration");
  transition-property: border-color;
  width:               0.625em;
}

@mixin block($spacing: vs.getVar("block-spacing")) {
  &:not(:last-child) {
    margin-bottom: $spacing;
  }
}

@mixin center($width, $height: 0) {
  position: absolute;

  @if $height != 0 {
    left: calc(50% - (#{$width} * 0.5));
    top:  calc(50% - (#{$height} * 0.5));
  } @else {
    left: calc(50% - (#{$width} * 0.5));
    top:  calc(50% - (#{$width} * 0.5));
  }
}

@mixin clearfix {
  &::after {
    clear:   both;
    content: " ";
    display: table;
  }
}

@mixin delete {
  @include vs.register-vars((
    "delete-dimensions": 1.25rem,
    "delete-background-l": 0%,
    "delete-background-alpha": 0.5,
    "delete-color": vs.getVar("white"),
  ));

  appearance:       none;
  cursor:           pointer;
  pointer-events:   auto;
  background-color: hsla(vs.getVar("scheme-h"), vs.getVar("scheme-s"), vs.getVar("delete-background-l"), vs.getVar("delete-background-alpha"));
  border:           none;
  outline:          none;
  border-radius:    vs.getVar("radius-rounded");
  display:          inline-flex;
  position:         relative;
  vertical-align:   top;
  flex-grow:        0;
  flex-shrink:      0;
  font-size:        1em;
  height:           vs.getVar("delete-dimensions");
  max-width:        vs.getVar("delete-dimensions");
  max-height:       vs.getVar("delete-dimensions");
  min-height:       vs.getVar("delete-dimensions");
  min-width:        vs.getVar("delete-dimensions");
  width:            vs.getVar("delete-dimensions");

  &::before,
  &::after {
    background-color: vs.getVar("delete-color");
    content:          "";
    display:          block;
    position:         absolute;
    left:             50%;
    top:              50%;
    transform:        translateX(-50%) translateY(-50%) rotate(45deg);
    transform-origin: center center;
  }

  &::before {
    height: 2px;
    width:  50%;
  }

  &::after {
    height: 50%;
    width:  2px;
  }

  &::hover,
  &::focus {
    @include vs.register-var("delete-background-alpha", 0.4);
  }

  &:active {
    @include vs.register-var("delete-background-alpha", 0.5);
  }

  // Sizes
  &.#{vi.$prefix}is-small {
    @include vs.register-var("delete-dimensions", 1rem);
  }

  &.#{vi.$prefix}is-medium {
    @include vs.register-var("delete-dimensions", 1.5rem);
  }

  &.#{vi.$prefix}is-large {
    @include vs.register-var("delete-dimensions", 2rem);
  }
}

@mixin burger($dimensions) {
  display:        inline-flex;
  flex-direction: column;
  flex-shrink:    0;
  position:       relative;
  align-items:    center;
  vertical-align: top;
  height:         $dimensions;
  width:          $dimensions;
  appearance:     none;
  background:     none;
  border:         none;
  border-radius:  vs.getVar("burger-border-radius");
  cursor:         pointer;
  color:          hsl(
                      vs.getVar("burger-h"),
                      vs.getVar("burger-s"),
                      vs.getVar("burger-l")
                  );

  span {
    display:                    block;
    height:                     vs.getVar("burger-item-height");
    width:                      vs.getVar("burger-item-width");
    position:                   absolute;
    left:                       calc(50% - calc(#{vs.getVar("burger-item-width")}) / 2);
    background-color:           currentColor;
    transform-origin:           center;
    transition-duration:        vs.getVar("duration");
    transition-property:        background-color, color, opacity, transform;
    transition-timing-function: vs.getVar("easing");

    &:nth-child(1),
    &:nth-child(2) {
      top: calc(50% - calc(#{vs.getVar("burger-item-height")}) / 2);
    }

    &:nth-child(3) {
      bottom: calc(50% + #{vs.getVar("burger-gap")});
    }

    &:nth-child(4) {
      top: calc(50% - #{vs.getVar("burger-gap")});
    }
  }

  &:hover {
    background-color: hsla(
                          vs.getVar("burger-h"),
                          vs.getVar("burger-s"),
                          vs.getVar("burger-l"),
                          0.1
                      );
  }
  &:active {
    background-color: hsla(
                          vs.getVar("burger-h"),
                          vs.getVar("burger-s"),
                          vs.getVar("burger-l"),
                          0.2
                      );
  }

  // modifiers
  &.#{vi.$prefix}is-active {
    span {
      &:nth-child(1) {
        transform: rotate(-45deg);
      }

      &:nth-child(2) {
        transform: rotate(45deg);
      }

      &:nth-child(3),
      &:nth-child(4) {
        opacity: 0;
      }
    }
  }
}

@mixin transition($transition...) {
  @if length($transition) == 0 {
    $transition: vd.$transition-base;
  }

  @if length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if nth($transition, 1) != null {
    transition: $transition;
  }

  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

@mixin scrollbar {
  #{if(&, "&", "*")} {
    scrollbar-color: vs.getVar("scrollbar") transparent;
  }

  #{if(&, "&", "*")}::-webkit-scrollbar {
    width:  0.5rem;
    height: 0.5rem;
    @include transition(vd.$transition-time)
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-thumb {
    border-radius: 0.25rem;
    border:        0.125rem solid transparent;
    box-shadow:    inset 0 0 0 0.25rem vs.getVar("scrollbar");
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-track {
    background: transparent;
  }

  #{if(&, "&", "*")}:hover::-webkit-scrollbar-thumb {
    box-shadow: inset 0 0 0 0.25rem vs.getVar("scrollbar-hover");
  }

  #{if(&, "&", "*")}::-webkit-scrollbar-corner {
    background: transparent;
  }
}

@mixin autodark-image {
  filter: brightness(0) invert(1);
}

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

@mixin placeholder {
  $placeholders: ":-moz" ":-webkit-input" "-moz" "-ms-input";

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin reset {
  appearance:  none;
  background:  none;
  border:      none;
  color:       inherit;
  font-family: inherit;
  font-size:   1em;
  margin:      0;
  padding:     0;
}

@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection { @content; }
    &::selection { @content; }
  } @else {
    ::-moz-selection { @content; }
    ::selection { @content; }
  }
}

// Responsiveness

@mixin from($device) {
  @media screen and (min-width: $device) {
    @content;
  }
}

@mixin until($device) {
  @media screen and (max-width: ($device - 1px)) {
    @content;
  }
}

@mixin between($from, $until) {
  @media screen and (min-width: $from) and (max-width: ($until - 1px)) {
    @content;
  }
}

@mixin mobile {
  @media screen and (max-width: (vi.$tablet - 1px)) {
    @content;
  }
}

@mixin tablet {
  @media screen and (min-width: vi.$tablet), print {
    @content;
  }
}

@mixin tablet-only {
  @media screen and (min-width: vi.$tablet) and (max-width: vi.$desktop - 1px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: vi.$desktop) {
    @content;
  }
}

@mixin until-widescreen {
  @if vi.$widescreen-enabled {
    @media screen and (max-width: vi.$widescreen - 1px) {
      @content;
    }
  }
}

@mixin desktop-only {
  @if vi.$widescreen-enabled {
    @media screen and (min-width: vi.$desktop) and (max-width: vi.$widescreen - 1px) {
      @content;
    }
  }
}

@mixin widescreen {
  @if vi.$widescreen-enabled {
    @media screen and (min-width: vi.$widescreen) {
      @content;
    }
  }
}

@mixin widescreen-only {
  @if vi.$widescreen-enabled and vi.$fullhd-enabled {
    @media screen and (min-width: vi.$widescreen) and (max-width: vi.$fullhd - 1px) {
      @content;
    }
  }
}

@mixin until-fullhd {
  @if vi.$fullhd-enabled {
    @media screen and (max-width: vi.$fullhd - 1px) {
      @content;
    }
  }
}

@mixin fullhd {
  @if vi.$fullhd-enabled {
    @media screen and (min-width: vi.$fullhd) {
      @content;
    }
  }
}

@mixin touch {
  @media screen and (max-width: vi.$desktop - 1px) {
    @content;
  }
}

@mixin breakpoint($name) {
  $breakpoint: map-get(vi.$breakpoints, $name);

  @if $breakpoint {
    $from:  map-get($breakpoint, "from");
    $until: map-get($breakpoint, "until");

    @if $from and $until {
      @include between($from, $until) {
        @content;
      }
    } @else if $from {
      @include from($from) {
        @content;
      }
    } @else if $until {
      @include until($until) {
        @content;
      }
    }
  }
}

@mixin container-from($name, $width) {
  @container #{$name} (min-width: #{$width}) {
    @content;
  }
}

@mixin container-until($name, $width) {
  @container #{$name} (max-width: #{$width - 1px}) {
    @content;
  }
}

// Placeholder

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select:   none;
  -moz-user-select:      none;
  -ms-user-select:       none;
  user-select:           none;
}

@mixin loader {
  animation:          spinAround 500ms infinite linear;
  border:             2px solid vs.getVar("loading-color");
  border-radius:      vs.getVar("radius-rounded");
  border-right-color: transparent;
  border-top-color:   transparent;
  content:            "";
  display:            block;
  height:             1em;
  width:              1em;
  position:           relative;
}

@mixin overlay($offset: 0) {
  position: absolute;
  bottom:   $offset;
  left:     $offset;
  right:    $offset;
  top:      $offset;
}
























