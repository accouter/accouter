@use "sass:list";

@use "../configs/variables-scss" as vs;
@use "../configs/variables-derived" as vd;
@use "../configs/variables-init" as vi;
@use "../configs/extends";
@use "../configs/mixins" as mx;
@use "../configs/functions" as fn;

$button-h:                                 #{vs.getVar("scheme-h")};
$button-s:                                 #{vs.getVar("scheme-s")};
$button-l:                                 #{vs.getVar("scheme-main-l")};
$button-background-l:                      #{vs.getVar("scheme-main-l")};
$button-background-l-delta:                0%;
$button-hover-background-l-delta:          #{vs.getVar("hoover-background-l-delta")};
$button-active-background-l-delta:         #{vs.getVar("active-background-l-delta")};
$button-color-l:                           #{vs.getVar("text-strong-l")};
$button-border-l:                          #{vs.getVar("border-l")};
$button-border-l-delta:                    0%;
$button-hover-border-l-delta:              #{vs.getVar("hoover-border-l-delta")};
$button-active-border-l-delta:             #{vs.getVar("active-border-l-delta")};
$button-focus-border-l-delta:              #{vs.getVar("focus-border-l-delta")};
$button-outer-shadow-h:                    0;
$button-outer-shadow-s:                    0%;
$button-outer-shadow-l:                    20%;
$button-outer-shadow-a:                    0.05;

$button-weight:                            #{vs.getVar("weight-medium")} !default;
$button-family:                            false !default;

$button-border-color:                      vs.getVar("border") !default;
$button-border-style:                      solid !default;
$button-border-width:                      vs.getVar("control-border-width") !default;

$button-padding-vertical:                  0em !default;
$button-padding-horizontal:                1em !default;
$button-rounded-padding-horizontal-offset: 0.25em !default;

$button-focus-border-color:                vs.getVar("link-focus-border") !default;
$button-focus-box-shadow-size:             0 0 0 0.125em !default;
$button-focus-box-shadow-color:            hsla(#{vs.getVar("link-h")}, #{vs.getVar("link-s")}, #{vs.getVar("link-on-sheme-l")}, 0.25) !default;

$button-active-color:                      vs.getVar("link-text-active") !default;
$button-active-border-color:               vs.getVar("link-text-active-border") !default;

$button-text-color:                        vs.getVar("text") !default;
$button-text-decoration:                   underline !default;
$button-text-hover-color:                  vs.getVar("text-strong") !default;
$button-text-hover-background-color:       vs.getVar("background") !default;

$button-ghost-color:                       vs.getVar("link-text") !default;
$button-ghost-decoration:                  none !default;
$button-ghost-hover-color:                 vs.getVar("link") !default;
$button-ghost-hover-decoration:            underline !default;
$button-ghost-background:                  none !default;
$button-ghost-border-color:                transparent !default;

$button-disabled-background-color:         vs.getVar("scheme-main") !default;
$button-disabled-border-color:             vs.getVar("border") !default;
$button-disabled-shadow:                   none !default;
$button-disabled-opacity:                  0.5 !default;

$button-static-color:                      vs.getVar("text-weak") !default;
$button-static-background-color:           vs.getVar("scheme-main-ter") !default;
$button-static-border-color:               vs.getVar("border") !default;

$button-colors:                            vd.$colors !default;
$button-responsive-sizes:                  (
                                             "mobile": (
                                               "small": calc(#{vs.getVar("size-small")} * 0.75),
                                               "normal": calc(#{vs.getVar("size-small")} * 0.875),
                                               "medium": vs.getVar("size-small"),
                                               "large": vs.getVar("size-normal"),
                                             ),
                                             "tablet-only":(
                                               "small": calc(#{vs.getVar("size-small")} * 0.875),
                                               "normal": vs.getVar("size-small"),
                                               "medium": vs.getVar("size-normal"),
                                               "large": vs.getVar("size-medium"),
                                             ),
                                           ) !default;

$no-palette:                               ("white", "black", "light", "dark");

.#{vi.$prefix}button {
  @include vs.register-vars((
    "button-family": #{$button-family},
    "button-weight": #{$button-weight},
    "button-border-color": #{$button-border-color},
    "button-border-style": #{$button-border-style},
    "button-border-width": #{$button-border-width},
    "button-padding-vertical": #{$button-padding-vertical},
    "button-padding-horizontal": #{$button-padding-horizontal},
    "button-focus-border-color": #{$button-focus-border-color},
    "button-focus-box-shadow-size": #{$button-focus-box-shadow-size},
    "button-focus-box-shadow-color": #{$button-focus-box-shadow-color},
    "button-active-color": #{$button-active-color},
    "button-active-border-color": #{$button-active-border-color},
    "button-text-color": #{$button-text-color},
    "button-text-decoration": #{$button-text-decoration},
    "button-text-hover-color": #{$button-text-hover-color},
    "button-text-hover-background-color": #{$button-text-hover-background-color},
    "button-ghost-color": #{$button-ghost-color},
    "button-ghost-decoration": #{$button-ghost-decoration},
    "button-ghost-hover-color": #{$button-ghost-hover-color},
    "button-ghost-hover-decoration": #{$button-ghost-hover-decoration},
    "button-ghost-background": #{$button-ghost-background},
    "button-ghost-border-color": #{$button-ghost-border-color},
    "button-disabled-background-color": #{$button-disabled-background-color},
    "button-disabled-border-color": #{$button-disabled-border-color},
    "button-disabled-shadow": #{$button-disabled-shadow},
    "button-disabled-opacity": #{$button-disabled-opacity},
    "button-static-color": #{$button-static-color},
    "button-static-background-color": #{$button-static-background-color},
    "button-static-border-color": #{$button-static-border-color},
  ));
}

.#{vi.$prefix}button {
  @include vs.register-vars((
    "button-h": #{$button-h},
    "button-s": #{$button-s},
    "button-l": #{$button-l},
    "button-background-l": #{$button-background-l},
    "button-background-l-delta": #{$button-background-l-delta},
    "button-hover-background-l-delta": #{$button-hover-background-l-delta},
    "button-active-background-l-delta": #{$button-active-background-l-delta},
    "button-color-l": #{$button-color-l},
    "button-border-l": #{$button-border-l},
    "button-border-l-delta": #{$button-border-l-delta},
    "button-hover-border-l-delta": #{$button-hover-border-l-delta},
    "button-active-border-l-delta": #{$button-active-border-l-delta},
    "button-focus-border-l-delta": #{$button-focus-border-l-delta},
    "button-outer-shadow-h": #{$button-outer-shadow-h},
    "button-outer-shadow-s": #{$button-outer-shadow-s},
    "button-outer-shadow-l": #{$button-outer-shadow-l},
    "button-outer-shadow-a": #{$button-outer-shadow-a},
    "loading-color": hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, #{vs.getVar("button-color-l")}),
  ));

  @extend %control;
  @extend %unselectable;

  background-color: hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, calc(#{vs.getVar("button-background-l")} + #{vs.getVar("button-background-l-delta")}));
  border-color:     hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, calc(#{vs.getVar("button-border-l")} + #{vs.getVar("button-border-l-delta")}));
  border-style:     vs.getVar("button-border-style");
  border-width:     vs.getVar("button-border-width");
  box-shadow:       0 0.0625em 0.125em hsla(vs.getVar("button-outer-shadow-h"), vs.getVar("button-outer-shadow-s"), vs.getVar("button-outer-shadow-l"), vs.getVar("button-outer-shadow-a")),
                    0 0.125em 0.25em hsla(vs.getVar("button-outer-shadow-h"), vs.getVar("button-outer-shadow-s"), vs.getVar("button-outer-shadow-l"), vs.getVar("button-outer-shadow-a"));
  color:            hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, vs.getVar("button-color-l"));
  cursor:           pointer;
  height:           auto;
  justify-content:  center;

  text-align:       center;
  white-space:      nowrap;
  Font-weight:      vs.getVar("button-weight");

  padding-bottom:   calc(#{vs.getVar("button-padding-vertical")} - #{vs.getVar("control-border-width")});
  padding-left:     calc(#{vs.getVar("button-padding-horizontal")} - #{vs.getVar("control-border-width")});
  padding-right:    calc(#{vs.getVar("button-padding-horizontal")} - #{vs.getVar("control-border-width")});
  padding-top:      calc(#{vs.getVar("button-padding-vertical")} - #{vs.getVar("control-border-width")});

  @if $button-family {
    font-family: #{$button-family};
  }

  strong {
    color: inherit;
  }

  .#{vi.$prefix}icon {
    &,
    &.#{vi.$prefix}is-small,
    &.#{vi.$prefix}is-medium,
    &.#{vi.$prefix}is-large {
      width:  1.5em;
      height: 1.5em;
    }

    &:first-child:not(:last-child) {
      margin-inline-start: calc(-0.5 * #{vs.getVar("button-padding-horizontal")});
      margin-inline-end:   calc(#{vs.getVar("button-padding-horizontal")} * 0.25);
    }

    &:last-child:not(:first-child) {
      margin-inline-start: calc(#{vs.getVar("button-padding-horizontal")} * 0.25);
      margin-inline-end:   calc(-0.5 * #{vs.getVar("button-padding-horizontal")});
    }

    &:first-child:last-child {
      margin-inline-start: calc(-0.5 * #{vs.getVar("button-padding-horizontal")});
      margin-inline-end:   calc(-0.5 * #{vs.getVar("button-padding-horizontal")});
    }
  }

  // states
  &:hover,
  &.#{vi.$prefix}is-hovered {
    @include vs.register-vars((
      "button-background-l-delta": calc(#{vs.getVar("button-hover-background-l-delta")}),
      "button-border-l-delta": calc(#{vs.getVar("button-hover-border-l-delta")}),
    ));
  }

  &:active,
  &.#{vi.$prefix}is-active {
    @include vs.register-vars((
      "button-background-l-delta": calc(#{vs.getVar("button-active-background-l-delta")}),
      "button-border-l-delta": calc(#{vs.getVar("button-active-border-l-delta")}),
      "button-outer-shadow-a": 0,
    ));
  }

  &:focus-visible,
  &.#{vi.$prefix}is-focused {
    @include vs.register-var("button-border-width", 1px);

    border-color: hsl(#{vs.getVar("focus-h")}, #{vs.getVar("focus-s")}, #{vs.getVar("focus-l")});
    box-shadow:   vs.getVar("focus-shadow-size") hsla(#{vs.getVar("focus-h")}, #{vs.getVar("focus-s")}, #{vs.getVar("focus-l")}, #{vs.getVar("fovus-shadow-alpha")});
  }

  &[disabled],
  fieldset[disabled] & {
    background-color: vs.getVar("button-disabled-background-color");
    border-color:     vs.getVar("button-disabled-border-color");
    box-shadow:       vs.getVar("button-disabled-shadow");
    opacity:          vs.getVar("button-disabled-opacity");
  }

  // colors
  @each $name, $pair in $button-colors {
    &.#{vi.$prefix}is-#{$name} {
      @include vs.register-vars((
        "button-h": #{vs.getVar($name, "", "-h")},
        "button-s": #{vs.getVar($name, "", "-s")},
        "button-l": #{vs.getVar($name, "", "-l")},
        "button-background-l": #{vs.getVar($name, "", "-l")},
        "button-color-l": #{vs.getVar($name, "", "-l")},
        "button-border-l": #{vs.getVar($name, "", "-l")},
        "button-border-width": 0px,
        "button-outer-shadow-a": 0,
      ));
    }

    &:focus-visible,
    &.#{vi.$prefix}is-focused {
      @include vs.register-var("button-border-width", 1px);
    }

    &.#{vi.$prefix}is-soft {
      @include vs.register-vars((
        "button-background-l": #{vs.getVar("soft-l")},
        "button-border-l": #{vs.getVar("soft-invert-l")},
      ));
    }

    &.#{vi.$prefix}is-bold {
      @include vs.register-vars((
        "button-background-l": #{vs.getVar("bold-l")},
        "button-border-l": #{vs.getVar("bold-invert-l")},
      ));
    }

    @if not list.index($no-palette, $name) {
      &.#{vi.$prefix}is-light {
        @include vs.register-vars((
          "button-background-l": #{vs.getVar("light-l")},
          "button-color-l": #{vs.getVar($name, "", "-light-invert-l")},
        ));
      }
      &.#{vi.$prefix}is-dark {
        @include vs.register-vars((
          "button-background-l": #{vs.getVar("dark-l")},
          "button-color-l": #{vs.getVar($name, "", "-dark-invert-l")},
        ));
      }
    }

    &[disabled],
    fieldset[disabled] & {
      background-color: vs.getVar($name);
      border-color:     vs.getVar($name);
      box-shadow:       none;
    }
  }

  // styles
  &.#{vi.$prefix}is-outlined {
    @include vs.register-vars((
      "button-border-width": max(1px, 0.0625em),
    ));

    background-color: transparent;
    border-color:     hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, #{vs.getVar("button-l")});
    color:            hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, #{vs.getVar("button-l")});

    &:hover {
      @include vs.register-vars((
        "button-border-width": max(2px, 0.125em),
        "button-outer-shadow-alpha": 1,
      ));
    }

    &:active {
      @include vs.register-vars((
        "button-border-width": max(2px, 0.125em),
        "button-outer-shadow-alpha": .8,
      ));
    }

  }

  &.#{vi.$prefix}is-inverted {
    background-color: hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, calc(#{vs.getVar("button-color-l")} + #{vs.getVar("button-background-l-delta")}));
    color:            hsl(#{vs.getVar("button-h")}, #{vs.getVar("button-s")}, #{vs.getVar("button-background-l")});
  }

  &.#{vi.$prefix}is-text {
    background-color: transparent;
    border-color:     transparent;
    color:            vs.getVar("button-text-color");
    text-decoration:  vs.getVar("button-text-decoration");

    &:hover,
    &.#{vi.$prefix}is-hovered {
      background-color: vs.getVar("button-text-hover-background-color");
      color:            vs.getVar("button-text-hover-color");
    }

    &:active,
    &.#{vi.$prefix}is-active {
      background-color: fn.colorDarken($button-text-hover-background-color, 5%);
      color:            vs.getVar("button-active-color");
    }

    &[disabled],
    fieldset[disabled] & {
      background-color: transparent;
      border-color:     transparent;
      box-shadow:       none;
    }
  }

  &.#{vi.$prefix}is-ghost {
    background:      vs.getVar("button-ghost-background");
    border-color:    vs.getVar("button-ghost-border-color");
    color:           vs.getVar("button-ghost-color");
    text-decoration: vs.getVar("button-ghost-decoration");
    box-shadow:      none;

    &:hover,
    &.#{vi.$prefix}is-hovered {
      color:           vs.getVar("button-ghost-hover-color");
      text-decoration: vs.getVar("button-ghost-hover-decoration");
    }
  }

  // sizes
  &.#{vi.$prefix}is-small {
    @include vs.register-vars((
      "control-size": #{vs.getVar("size-small")},
      "control-radius": #{vs.getVar("radius-small")},
    ));
  }

  &.#{vi.$prefix}is-normal {
    @include vs.register-vars((
      "control-size": #{vs.getVar("size-normal")},
      "control-radius": #{vs.getVar("radius")},
    ));
  }

  &.#{vi.$prefix}is-medium {
    @include vs.register-vars((
      "control-size": #{vs.getVar("size-medium")},
      "control-radius": #{vs.getVar("radius-medium")},
    ));
  }

  &.#{vi.$prefix}is-large {
    @include vs.register-vars((
      "control-size": #{vs.getVar("size-large")},
      "control-radius": #{vs.getVar("radius-large")},
    ));
  }

  // modifiers
  &.#{vi.$prefix}is-fullwidth {
    display: flex;
    width:   100%;
  }

  &.#{vi.$prefix}is-loading {
    color:          transparent !important;
    box-shadow:     none;
    pointer-events: none;

    &::after {
      @extend %loader;
      @include mx.center(1em);
      position: absolute !important;
    }
  }

  &.#{vi.$prefix}is-static {}

  &.#{vi.$prefix}is-rounded {}
}
