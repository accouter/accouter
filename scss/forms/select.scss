@use "shared";
@use "../configs/variables-derived" as vd;
@use "../configs/variables-init" as vi;
@use "../configs/variables-scss" as vs;
@use "../configs/controls";
@use "../configs/extends";

$select-colors: shared.$form-colors !default;

.#{vi.$prefix}select {
  @include vs.register-vars((
    "input-h": #{vs.getVar("scheme-h")},
    "input-s": #{vs.getVar("scheme-s")},
    "input-border-style": solid,
    "input-border-width": 1px,
    "input-border-l": #{vs.getVar("border-l")},
  ));

  display:        inline-block;
  position:       relative;
  max-width:      100%;
  vertical-align: top;

  &:not(.#{vi.$prefix}is-multiple) {
    height: shared.$input-height;
  }

  &:not(.#{vi.$prefix}is-multiple):not(.#{vi.$prefix}is-loading) {
    &::after {
      @extend %arrow;
      inset-inline-end: 1.125em;
      z-index:          4;
    }
  }

  &.#{vi.$prefix}is-rounded {
    select {
      border-radius:        vs.getVar("radius-rounded");
      padding-inline-start: 1em;
    }
  }

  select {
    @extend %input;

    display:   block;
    max-width: 100%;
    font-size: 1em;
    cursor:    pointer;
    outline:   none;

    &::-ms-expand {
      display: none;
    }

    &[disabled]:hover,
    fieldset[disabled] &:hover {
      border-color: shared.$input-disabled-border-color;
    }

    &:not([multiple]) {
      padding-inline-end: 2.5em;
    }

    &[multiple] {
      height:  auto;
      padding: 0;

      option {
        padding: 0.5em 1em;
      }
    }
  }

  // colors
  @each $name, $pair in $select-colors {
    &.#{vi.$prefix}is-#{$name} {
      @include vs.register-vars((
        "input-h": #{vs.getVar($name, "", "-h")},
        "input-s": #{vs.getVar($name, "", "-s")},
        "input-l": #{vs.getVar($name, "", "-l")},
        "input-focus-h": #{vs.getVar($name, "", "-h")},
        "input-focus-s": #{vs.getVar($name, "", "-s")},
        "input-focus-l": #{vs.getVar($name, "", "-l")},
        "arrow-color": #{vs.getVar($name)},
      ));
    }
  }

  // sizes

  // modifiers
}